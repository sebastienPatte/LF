# 2 "lexer.mll"
         
        open Parser        (* The type token is defined in parser.mli *)
        exception Eof
        
# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\234\255\235\255\236\255\029\000\238\255\239\255\240\255\
    \241\255\242\255\243\255\244\255\245\255\000\000\000\000\002\000\
    \003\000\002\000\004\000\007\000\002\000\013\000\255\255\017\000\
    \001\000\015\000\009\000\000\000\254\255\016\000\253\255\015\000\
    \006\000\029\000\032\000\020\000\252\255\025\000\033\000\032\000\
    \028\000\023\000\251\255\037\000\036\000\032\000\250\255\029\000\
    \249\255\248\255\247\255\044\000\246\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\018\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \010\000\008\000\002\000\000\000\006\000\000\000\005\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\011\000\012\000\000\000\007\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\017\000\029\000\014\000\013\000\016\000\043\000\
    \025\000\019\000\027\000\033\000\018\000\028\000\051\000\050\000\
    \021\000\049\000\047\000\037\000\015\000\031\000\020\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\023\000\
    \024\000\026\000\030\000\032\000\034\000\035\000\036\000\038\000\
    \039\000\040\000\041\000\042\000\044\000\045\000\046\000\048\000\
    \052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\020\000\000\000\000\000\000\000\017\000\
    \024\000\000\000\026\000\032\000\000\000\027\000\013\000\014\000\
    \000\000\015\000\016\000\018\000\000\000\019\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\021\000\
    \023\000\025\000\029\000\031\000\033\000\034\000\035\000\037\000\
    \038\000\039\000\040\000\041\000\043\000\044\000\045\000\047\000\
    \051\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 7 "lexer.mll"
                           ( token lexbuf )
# 132 "lexer.ml"

  | 1 ->
# 8 "lexer.mll"
                         ( PROGRAM )
# 137 "lexer.ml"

  | 2 ->
# 9 "lexer.mll"
                     ( VAR )
# 142 "lexer.ml"

  | 3 ->
# 10 "lexer.mll"
                         ( INTEGER )
# 147 "lexer.ml"

  | 4 ->
# 11 "lexer.mll"
                         ( LONGINT )
# 152 "lexer.ml"

  | 5 ->
# 12 "lexer.mll"
                       ( BEGIN )
# 157 "lexer.ml"

  | 6 ->
# 13 "lexer.mll"
                     ( FOR )
# 162 "lexer.ml"

  | 7 ->
# 14 "lexer.mll"
                    ( TO )
# 167 "lexer.ml"

  | 8 ->
# 15 "lexer.mll"
             ( DO )
# 172 "lexer.ml"

  | 9 ->
# 16 "lexer.mll"
                     ( END )
# 177 "lexer.ml"

  | 10 ->
# 17 "lexer.mll"
                    ( PT_VIRG )
# 182 "lexer.ml"

  | 11 ->
# 18 "lexer.mll"
                    ( DEUX_PT )
# 187 "lexer.ml"

  | 12 ->
# 19 "lexer.mll"
                    ( PAR_O )
# 192 "lexer.ml"

  | 13 ->
# 20 "lexer.mll"
             ( APOSTR )
# 197 "lexer.ml"

  | 14 ->
# 21 "lexer.mll"
                    ( PAR_F )
# 202 "lexer.ml"

  | 15 ->
# 22 "lexer.mll"
                    ( EGAL )
# 207 "lexer.ml"

  | 16 ->
# 23 "lexer.mll"
                    ( VIRG )
# 212 "lexer.ml"

  | 17 ->
# 24 "lexer.mll"
                    ( PT )
# 217 "lexer.ml"

  | 18 ->
# 25 "lexer.mll"
                                         ( ID )
# 222 "lexer.ml"

  | 19 ->
# 26 "lexer.mll"
                         ( CTE )
# 227 "lexer.ml"

  | 20 ->
# 27 "lexer.mll"
                    ( MULT )
# 232 "lexer.ml"

  | 21 ->
# 28 "lexer.mll"
                    ( raise Eof )
# 237 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

